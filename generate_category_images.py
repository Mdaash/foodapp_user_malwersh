#!/usr/bin/env python3
"""
ูููุฏ ุตูุฑ ุงููุฆุงุช ุจุงูุญุฌู ุงูููุงุณุจ
Category Images Generator with Optimal Size

ูููู ุงุณุชุฎุฏุงู ูุฐุง ุงูููู ูุฏููู ูุฅูุดุงุก ุตูุฑ ูุฆุงุช ุฌุฏูุฏุฉ ุจุงูููุงุตูุงุช ุงููุทููุจุฉ
"""

from PIL import Image, ImageDraw, ImageFont
import os

def create_sample_category_image(name, color, icon_text, size=(300, 300)):
    """ุฅูุดุงุก ุตูุฑุฉ ูุฆุฉ ูููุฐุฌูุฉ ุจุงูุญุฌู ุงูููุงุณุจ"""
    
    # ุฅูุดุงุก ุตูุฑุฉ ุฌุฏูุฏุฉ ุจุฎูููุฉ ุดูุงูุฉ
    img = Image.new('RGBA', size, (0, 0, 0, 0))
    draw = ImageDraw.Draw(img)
    
    # ุฑุณู ุฏุงุฆุฑุฉ ููููุฉ ูู ุงูููุชุตู
    center = (size[0] // 2, size[1] // 2)
    radius = min(size) // 3
    
    # ุฑุณู ุธู ุฎููู
    shadow_offset = 8
    draw.ellipse(
        [center[0] - radius + shadow_offset, center[1] - radius + shadow_offset,
         center[0] + radius + shadow_offset, center[1] + radius + shadow_offset],
        fill=(0, 0, 0, 30)
    )
    
    # ุฑุณู ุงูุฏุงุฆุฑุฉ ุงูุฑุฆูุณูุฉ
    draw.ellipse(
        [center[0] - radius, center[1] - radius,
         center[0] + radius, center[1] + radius],
        fill=color
    )
    
    # ุฅุถุงูุฉ ูุต ุงูุฃููููุฉ
    try:
        # ูุญุงููุฉ ุงุณุชุฎุฏุงู ุฎุท ุงููุธุงู
        font_size = radius // 2
        font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", font_size)
    except:
        # ูู ุญุงูุฉ ุนุฏู ุชููุฑ ุงูุฎุทุ ุงุณุชุฎุฏู ุงูุฎุท ุงูุงูุชุฑุงุถู
        font = ImageFont.load_default()
    
    # ุญุณุงุจ ููุถุน ุงููุต
    text_bbox = draw.textbbox((0, 0), icon_text, font=font)
    text_width = text_bbox[2] - text_bbox[0]
    text_height = text_bbox[3] - text_bbox[1]
    text_x = center[0] - text_width // 2
    text_y = center[1] - text_height // 2
    
    # ุฑุณู ุงููุต
    draw.text((text_x, text_y), icon_text, fill=(255, 255, 255, 255), font=font)
    
    return img

def generate_sample_category_images():
    """ุฅูุดุงุก ูุฌููุนุฉ ูู ุตูุฑ ุงููุฆุงุช ุงููููุฐุฌูุฉ"""
    
    categories = [
        {"name": "sample_restaurants", "color": (255, 107, 107, 255), "icon": "๐ฝ๏ธ"},
        {"name": "sample_supermarket", "color": (0, 184, 148, 255), "icon": "๐"},
        {"name": "sample_fast_food", "color": (78, 205, 196, 255), "icon": "๐"},
        {"name": "sample_breakfast", "color": (69, 183, 209, 255), "icon": "โ"},
        {"name": "sample_grocery", "color": (150, 206, 180, 255), "icon": "๐ฅฌ"},
    ]
    
    output_dir = "sample_category_images"
    os.makedirs(output_dir, exist_ok=True)
    
    print("๐จ ุฅูุดุงุก ุตูุฑ ูุฆุงุช ูููุฐุฌูุฉ...")
    print(f"๐ ูุฌูุฏ ุงูุญูุธ: {output_dir}")
    print("-" * 50)
    
    for category in categories:
        img = create_sample_category_image(
            category["name"], 
            category["color"], 
            category["icon"]
        )
        
        file_path = os.path.join(output_dir, f"{category['name']}.png")
        img.save(file_path, 'PNG', optimize=True, compress_level=6)
        
        file_size = os.path.getsize(file_path)
        print(f"โ {category['name']}.png - {img.size[0]}ร{img.size[1]}px - {file_size/1024:.1f}KB")
    
    print(f"\n๐ ุชู ุฅูุดุงุก {len(categories)} ุตูุฑุฉ ูููุฐุฌูุฉ!")

def get_optimal_image_specs():
    """ุนุฑุถ ุงูููุงุตูุงุช ุงููุซูู ูุตูุฑ ุงููุฆุงุช"""
    
    specs = {
        "ุงูุญุฌู ุงููุซุงูู": "300 ร 300px",
        "ุงูุญุฏ ุงูุฃุฏูู": "200 ร 200px", 
        "ุงูุญุฏ ุงูุฃูุตู": "400 ร 400px",
        "ุงูุตูุบุฉ": "PNG ูุน ุดูุงููุฉ",
        "ุงูุฏูุฉ": "72-96 DPI",
        "ุญุฌู ุงูููู ุงููุณุชูุฏู": "ุฃูู ูู 50KB",
        "ูุณุจุฉ ุงูุนุฑุถ ููุงุฑุชูุงุน": "1:1 (ูุฑุจุน)",
        "ุนูู ุงูุฃููุงู": "32-bit (RGBA)",
        "ุงูุถุบุท": "ููุญุณู ูู PNG"
    }
    
    print("๐ ุงูููุงุตูุงุช ุงููุซูู ูุตูุฑ ุงููุฆุงุช:")
    print("=" * 40)
    
    for key, value in specs.items():
        print(f"{key:25}: {value}")
    
    print("\n๐ก ูุตุงุฆุญ ุงูุชุตููู:")
    print("   โข ุงุณุชุฎุฏู ุฃููุงู ูุงุถุญุฉ ููุชุจุงููุฉ")
    print("   โข ุชุฃูุฏ ูู ูุถูุญ ุงูุฃููููุฉ ุนูู ุฎูููุงุช ูุฎุชููุฉ")
    print("   โข ุงุญุชูุธ ุจูุณุฎุฉ ุฃุตููุฉ ุนุงููุฉ ุงูุฏูุฉ ููุชุนุฏููุงุช ุงููุณุชูุจููุฉ") 
    print("   โข ุงุฎุชุจุฑ ุงูุตูุฑ ุนูู ุฃุฌูุฒุฉ ูุฎุชููุฉ")
    print("   โข ุงุณุชุฎุฏู ุฃุฏูุงุช ุถุบุท ุงูุตูุฑ ูุชูููู ุญุฌู ุงูููู")

if __name__ == "__main__":
    print("๐ผ๏ธ  ูููุฏ ุตูุฑ ุงููุฆุงุช ุจุงูุญุฌู ุงูููุงุณุจ")
    print("=" * 50)
    
    print("ุงูุฎูุงุฑุงุช ุงููุชุงุญุฉ:")
    print("1. ุนุฑุถ ุงูููุงุตูุงุช ุงููุซูู")
    print("2. ุฅูุดุงุก ุตูุฑ ูููุฐุฌูุฉ")
    print("3. ุงูุฎุฑูุฌ")
    
    choice = input("\nุงุฎุชุฑ ุฑูู ุงูุฎูุงุฑ: ")
    
    if choice == "1":
        get_optimal_image_specs()
    elif choice == "2":
        generate_sample_category_images()
    else:
        print("ุดูุฑุงู ูุงุณุชุฎุฏุงู ุงููููุฏ!")
